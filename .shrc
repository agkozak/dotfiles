# ~/.shrc - bourne shell startup file
#
# https://github.com/agkozak/dotfiles
#
# This file will be used if the shell is invoked for interactive use and
# the environment variable ENV is set to this file. It is sourced at the
# beginnning of .zshrc and .bashrc
#
# shellcheck shell=sh disable=SC1090,SC1091,SC1094,SC2016,SC2034,SC2153

# Only run this script when shell is interactive {{{1

case $- in
  *i*) ;;
  *) exit ;;
esac

# }}}1

# AGKDOT_SYSTEMINFO {{{1

export AGKDOT_SYSTEMINFO
: "${AGKDOT_SYSTEMINFO:=$(uname -a)}"

# }}}1

# Source system-wide files {{{1
case $AGKDOT_SYSTEMINFO in
  NetBSD*) [ -f /etc/shrc ] && . /etc/shrc ;;
esac

case $KSH_VERSION in
  *'LEGACY KSH'*|*'MIRBSD KSH'*) [ -s /etc/mkshrc ] && . /etc/mkshrc ;;
esac

# }}}1

# Begin .shrc benchmark {{{1

if [ "${AGKDOT_BENCHMARKS:-0}" -eq 1 ]    &&
   [ "${AGKDOT_ZSHRC_LOADING:-0}" -ne 1 ] &&
   # BusyBox date doesn't work in nanoseconds
   [ ! -h /bin/date ]; then
  case $AGKDOT_SYSTEMINFO in
    # Neither does BSD date
    *BSD*|DragonFly*) ;;
    *) AGKDOT_SHRC_START="$(/bin/date +%s%N)" ;;
  esac
fi

# }}}1

# Raspberry Pi LXTerminal {{{1

# It's important to set this up early so that dircolors uses the right number of
# colors

if [ "$XDG_CURRENT_DESKTOP" = 'LXDE' ] && [ "$TERM" = 'xterm' ]; then
  TERM='xterm-256color'                              # LXTerminal can't set TERM
fi

# }}}1

# Aliases {{{1

# enable color support of ls and also add handy aliases {{{2
if [ "$TERM" != "$AGKDOT_ORIG_TERM" ]; then
  export AGKDOT_TERM_COLORS
  case $TERM in
    *-256color) AGKDOT_TERM_COLORS=256 ;;
    vt100|vt220|dumb) AGKDOT_TERM_COLORS=-1 ;;
    *)
      case ${AGKDOT_SYSTEMINFO} in
        FreeBSD*|DragonFly*) AGKDOT_TERM_COLORS="$(tput Co)" ;;
        UWIN*) AGKDOT_TERM_COLORS="$(tput cols)" ;;
        *) AGKDOT_TERM_COLORS="$(tput colors)" ;;
      esac
      ;;
  esac
fi

if [ -h /bin/ls ]; then
  AGKDOT_IS_BUSYBOX_LS=1
fi

if [ "${AGKDOT_IS_BUSYBOX_LS:-0}" -eq 0 ]; then
  case $AGKDOT_SYSTEMINFO in
    NetBSD*|OpenBSD*|UWIN*) ;;
    SunOS*|FreeBSD*) LS_OPTIONS='--color' ;;
    Darwin*|*DragonFly*)
      if [ "$AGKDOT_TERM_COLORS" -ge 8 ]; then
        CLICLOR=1
        LSCOLORS='ExfxcxdxBxegedAbagacad'
        LS_OPTIONS='-G'
      fi
      ;;
    # GNU ls
    *)
      LS_OPTIONS='--group-directories-first -F -h -T 0'
      [ "$AGKDOT_TERM_COLORS" -ge 8 ] && LS_OPTIONS="${LS_OPTIONS} --color"
      case $AGKDOT_SYSTEMINFO in
        *Msys|*Cygwin|*[Mm]icrosoft*)
          LS_OPTIONS="${LS_OPTIONS} --hide=NTUSER* --hide=ntuser*"
          ;;
      esac
      ;;
  esac
else
  [ "$AGKDOT_TERM_COLORS" -ge 8 ] && LS_OPTIONS=--color
fi

alias ls='ls ${LS_OPTIONS}'

# shellcheck disable=SC2153
if [ -n "$INSIDE_EMACS" ]; then
  unset LS_COLORS
# If dircolors is available, install.sh will have installed ~/.dircolors
# Try not to run dircolors more than once unless TERM has changed
elif [ "$TERM" != "$AGKDOT_ORIG_TERM" ] && [ -f "${HOME}/.dircolors" ]; then
  case $AGKDOT_SYSTEMINFO in
    SunOS*) eval "$(dircolors -b)" ;;
    *)
      if [ -f "${HOME}/.dircolors" ] && [ "$AGKDOT_TERM_COLORS" -ge 256 ]; then
        eval "$(dircolors -b "${HOME}/.dircolors")"
      elif [ "$AGKDOT_TERM_COLORS" -ge 8 ]; then
        eval "$(dircolors -b)"
      fi
      ;;
  esac
fi
export LS_COLORS AGKDOT_ORIG_TERM
AGKDOT_ORIG_TERM=$TERM

case $AGKDOT_SYSTEMINFO in
  *ish*|UWIN*) ;;
  *)
    if [ "${AGKDOT_IS_BUSYBOX_LS:-0}" -eq 0 ] &&
       [ "$AGKDOT_TERM_COLORS"        -ge 8 ]; then
      alias dir='dir --color'
      alias vdir='vdir --color'
      alias grep='grep --color'
      alias fgrep='fgrep --color'
      alias egrep='egrep --color'

      # Zenburn-like colors for GNU grep
      export GREP_COLORS
      GREP_COLORS='sl=49;39:cx=49;39:mt=48;5;22;38;5;230;1:fn=49;38;5;224:ln=49;38;5;78:bn=49;38;5;78:se=49;38;5;116';
    fi
    ;;
esac

unset AGKDOT_BUSYBOX_LS

# }}}2

# some more ls aliases {{{2

alias l='ls -CF'
alias la='ls -A'
alias lart='ls -1Fcart'

ldot() {
  [ -n "$ZSH_VERSION" ] &&
    setopt LOCAL_OPTIONS SH_WORD_SPLIT NO_WARN_CREATE_GLOBAL

  [ $# -eq 0 ] && ls $LS_OPTIONS -ld .* && return

  until [ $# -eq 0 ]; do
    if [ -d "$1" ]; then
      LDOT_ARGS="$LDOT_ARGS $(\ls -d "${1}"/.*)"
    else
      LDOT_ARGS="$LDOT_ARGS ${1}"
    fi
    shift
  done

  # shellcheck disable=SC2086
  ls $LS_OPTIONS -ld $LDOT_ARGS
  unset LDOT_ARGS
}

alias ll='ls -alF'
alias lr='ls -tRFh'   # sorted by date, recursive, show type, human-readable
alias lrt='ls -1Fcrt'
alias lt='ls -ltFh'   # long list, sorted by date, show type, human-readable
alias lS='ls -1FSsh'

# }}}2

# BusyBox less doesn't pay attention to $LESS
[ -h /bin/less ] && alias less='less -IMR'

# _agkdot_is_uwin() {
#   case $AGKDOT_SYSTEMINFO in
#     UWIN*) return 0 ;;
#     *) return 1 ;;
#   esac
# }

case $KSH_VERSION in
  *R55*) ;;         # mksh version R55 erroneously does not allow these aliases
  *)
    alias ..='cd ..'
    alias ...='cd ../..'
    ;;
esac

# if  command -v composer.phar > /dev/null 2>&1 &&
#   ! command -v composer      > /dev/null 2>&1; then
#   alias composer='composer.phar'
# fi
# command -v dos2unix > /dev/null 2>&1 || command -v perl > /dev/null 2>&1 &&
#   alias dos2unix='perl -p -i -e "s/\\r\\n/\\n/g"'

############################################################
# If a given command exists, make an alias for it
#
# Arguments
#   $1 The command
#   $2 The alias
############################################################
# _agkdot_cond_aliases() {
#   until [ $# = 0 ]; do
#     command -v "$1" > /dev/null 2>&1 && alias "$2"
#     shift
#     shift
#   done
# }

# command -v can be slow
alias bat='batcat'
alias github-stats='github-stats --token ${GITHUB_STATS_TOKEN}'
alias bri='hue set all -b'
[ "$EDITOR" = vim ] && alias vi='vim'
alias wp='wp-cli.phar'
alias yta='youtube-dl --audio-format best -x '

# unset -f _agkdot_cond_aliases

# System-specific aliases {{{2

############################################################
# Create winpty aliases for MSYS2 and Cygwin
#
# Arguments:
#   $1, $2, etc.  Programs that should be run with winpty
############################################################
# _agkdot_winpty_alias() {
#   command -v winpty > /dev/null 2>&1 || echo 'Install winpty.' >&2 && return 1
#   while [ $# -ne 0 ]; do
#     # shellcheck disable=SC2139,SC2140
#     command -v "$1" > /dev/null 2>&1 && alias "$1"="winpty $1"
#     shift
#   done
# }

command -v winpty > /dev/null 2>&1 && AGKDOT_WINPTY=1

case $AGKDOT_SYSTEMINFO in
  *Msys|*Cygwin)
    if [ "$AGKDOT_WINPTY" -eq 1 ]; then
      alias node='winpty node'
      alias php='winpty php'

      # Workaround for https://github.com/msys2/MSYS2-packages/issues/1568#issuecomment-847004378
      alias choco='temp= tmp= winpty choco'
      alias cinst='temp= tmp= winpty cinst'
      alias cuninst='temp= tmp= winpty cuninst'
      alias cup='temp= tmp= winpty cup'

      alias eslint='winpty ${APPDATA}/npm/eslint.cmd'
    fi

    alias ghci='ghcii.sh'
    ;;
esac

case $AGKDOT_SYSTEMINFO in
  *Msys)
    if [ "$AGKDOT_WINPTY" -eq 1 ]; then
      alias npm='winpty /c/Program\ Files/nodejs/npm.cmd'
      alias wp='winpty php $HOME/bin/wp-cli.phar --no-color'
    fi
    alias gvim='/c/Windows/gvim.bat'
    ;;
  *Cygwin)
    alias composer='php $(cygpath -w "${HOME}/bin/composer.phar")'
    if [ "$AGKDOT_WINPTY" -eq 1 ]; then
      alias npm='winpty /cygdrive/c/Program\ Files/nodejs/npm.cmd'
    fi
    alias gvim='/cygdrive/c/Windows/gvim.bat'
    ;;
  *CYGWIN_NT-10.0-WOW*|*[Mm]icrosoft*)
    tmux='tmux -S "${HOME}/.tmsock"'
    ;;
  *raspberrypi*)
    alias temp='/opt/vc/bin/vcgencmd measure_temp | egrep "[0-9.]{4,}" -o'
    ;;
esac

# WSL aliases {{{3

case $AGKDOT_SYSTEMINFO in
  *[Mm]icrosoft*)
    ############################################################
    # Create aliases for Windows .exe programs
    #
    # Arguments:
    #   $@  A list of Windows programs
    ############################################################
    # _agkdot_exe_alias() {
    #   for i in "$@"; do
    #     command -v "${i}.exe" > /dev/null 2>&1 || return
    #     # shellcheck disable=SC2139,SC2140
    #     alias "$i"="${i}.exe"
    #   done
    #   unset i
    # }

    alias explorer='explorer.exe'
    alias subl='subl.exe'
    alias wsl='wsl.exe'
    ;;
esac

# }}}3

# }}}2

# }}}1

# Prompt {{{1

# If possible, load the pan-POSIX Polyglot Prompt
# But not in zsh -- it uses agkozak-zsh-prompt

############################################################
# Are we using FreeBSD sh?
############################################################
_agkdot_is_bsd_sh() {
  case $AGKDOT_SYSTEMINFO in
    FreeBSD*)
      case ${0#-} in
        sh) return 0 ;;
        *) return 1 ;;
      esac
      ;;
    *) return 1 ;;
  esac
}

if [ -z "$ZSH_VERSION" ] ||
   [ "$0" = 'bash' ]     ||
   [ "$0" = 'ksh' ]      ||
   [ "$0" = 'sh' ] && ! _agkdot_is_bsd_sh; then
  if [ -f "${HOME}/dotfiles/prompts/polyglot/polyglot.sh" ]; then
    # shellcheck source=/dev/null
    . "${HOME}/dotfiles/prompts/polyglot/polyglot.sh"
  fi
fi

# }}}1

# Miscellaneous {{{1

# search path for cd(1)
# CDPATH=:$HOME

# For ksh93/mksh

# vi-style line editing
set -o vi

case $KSH_VERSION in
  *93*)
    # shellcheck disable=SC3040
    set -o globstar
    # Search path for autoloadable functions
    FPATH='/usr/share/ksh/functions:~/.func'
    ;;
  *'PD KSH'*)
    # shellcheck disable=SC3040
    set -o vi-tabcomplete
    ;;
esac

HISTSIZE=10000

# If it's not really zsh emulating ksh
if [ -z "$ZSH_VERSION" ]; then
  case $KSH_VERSION in
    *'PD KSH'*) HISTFILE="${HOME}/.pdksh_history" ;;
    *'LEGACY KSH'*|*'MIRBSD KSH'*) HISTFILE="${HOME}/.mksh_history" ;;
    *) HISTFILE="${HOME}/.ksh_history" ;;
  esac
fi

# }}}1

# find shorthand {{{1

f() {
  find . -name "$1" 2>&1 | grep -v 'Permission denied'
}

# }}}1

# Pull in updates from the dotfiles repo and install them {{{1

update_dotfiles() {
  CUR_DIR="$PWD"
  printf '%s' 'Updating dotfiles: '
  cd "${HOME}/dotfiles" || exit
  git pull && ./install.sh
  # shellcheck disable=SC2044
  for i in $(find . -name '.git'); do
    i=${i#\./}
    [ "$i" = '.git' ] && continue
    i=${i%/\.git}
    printf 'Updating %s: ' "${i##*/}"
    cd "$i" || exit
    cd ..
    git pull
    cd "${HOME}/dotfiles" || exit
  done
  cd "$CUR_DIR" || exit
  unset CUR_DIR i
}

# }}}1

# Disable flow control -- allows use of Ctrl-Q as tmux/screen prefix {{{1

# zsh might be running in ksh emulation mode
if [ "$0" = 'ksh' ] || [ -z "$ZSH_VERSION" ]; then
  stty -ixon
fi

# }}}1

# End .shrc benchmark {{{1

if [ -n "$AGKDOT_SHRC_START" ]; then
  AGKDOT_SHRC_FINISH="$(/bin/date +%s%N)"
  AGKDOT_DIFFERENCE=$(( AGKDOT_SHRC_FINISH - AGKDOT_SHRC_START ))
  echo ".shrc loaded in $((AGKDOT_DIFFERENCE/1000000))ms."
fi

unset AGKDOT_SHRC_START AGKDOT_SHRC_FINISH AGKDOT_DIFFERENCE
unset -f _agkdot_is_bsd_sh # _agkdot_winpty_alias _agkdot_is_uwin

# }}}1

# Source ~/.shrc.local {{{1

if [ -f "${HOME}/.shrc.local" ]; then . "${HOME}/.shrc.local"; fi

# }}}1

# vim: ft=sh:fdm=marker:ts=2:et:sw=2:ai:sts=2
